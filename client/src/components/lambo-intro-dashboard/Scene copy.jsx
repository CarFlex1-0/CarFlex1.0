/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 scene.gltf 
Author: BlackCube (https://sketchfab.com/blackcube4)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/lamborghini-aventador-2263b49846d840618046538012720c59
Title: Lamborghini Aventador
*/

import React, { Suspense, useEffect, useRef, useState } from "react";
import {
  useGLTF,
  useTexture,
  Html,
} from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";
import gsap from "gsap";
import {
  motion,
  useScroll,
  useTransform,
} from "framer-motion";
import "./Scene.css"; // Add this line to import the CSS

function Model(props) {
  const { nodes, materials } = useGLTF("/assets/models/scene.gltf");
  const ref = useRef();
  const tl = useRef();

  const scroll = useScroll();
  const textures = useTexture({
    Carbon_baseColor: "/assets/models/textures/Carbon_baseColor.jpeg",
    Carbon_metallicRoughness:
      "/assets/models/textures/Carbon_metallicRoughness.png",
    Carbon_normal: "/assets/models/textures/Carbon_normal.jpeg",
    Emblem_baseColor: "/assets/models/textures/Emblem_baseColor.png",
    Emblem_metallicRoughness:
      "/assets/models/textures/Emblem_metallicRoughness.png",
    Emblem_normal: "/assets/models/textures/Emblem_normal.png",
    Tires_2_baseColor: "/assets/models/textures/Tires_2_baseColor.jpeg",
    Brake_disk_baseColor: "/assets/models/textures/Brake_disk_baseColor.png",
  });

  useEffect(() => {
    Object.entries(materials).forEach(([name, material]) => {
      if (name === "Carbon") {
        material.map = textures.Carbon_baseColor;
        material.metalnessMap = material.roughnessMap =
          textures.Carbon_metallicRoughness;
        material.normalMap = textures.Carbon_normal;
      } else if (name === "Emblem") {
        material.map = textures.Emblem_baseColor;
        material.metalnessMap = material.roughnessMap =
          textures.Emblem_metallicRoughness;
        material.normalMap = textures.Emblem_normal;
      } else if (name === "Tires_2") {
        material.map = textures.Tires_2_baseColor;
      } else if (name === "Brake_disk") {
        material.map = textures.Brake_disk_baseColor;
      }

      if (material.map) material.map.encoding = THREE.sRGBEncoding;
      material.needsUpdate = true;
    });
  }, [materials, textures]);

  useEffect(() => {
    tl.current = gsap.timeline({ repeat: -1 });

    // Rotation Animation
    tl.current.to(ref.current.rotation, {
      duration: 10,
      y: Math.PI * 2,
      ease: "none",
    });
  }, []);

  useFrame(() => {
    if (tl.current) {
      tl.current.seek(scroll.offset * tl.current.duration());
    }
  });

  return (
    <group ref={ref} {...props} dispose={null}>
      <group position={[0.002, 0.098, -0.012]} scale={0.001}>
        <mesh geometry={nodes.Object_4.geometry} material={materials.Carbon} />
        <mesh
          geometry={nodes.Object_5.geometry}
          material={materials.Dark_Metal}
        />
        <mesh geometry={nodes.Object_6.geometry} material={materials.Chrome} />
        <mesh
          geometry={nodes.Object_7.geometry}
          material={materials.Red_Lights}
        />
        <mesh
          geometry={nodes.Object_8.geometry}
          material={materials.Orange_Lights}
        />
        <mesh
          geometry={nodes.Object_9.geometry}
          material={materials.Aluminum}
        />
      </group>
      <group scale={0.001}>
        <mesh geometry={nodes.Object_13.geometry} material={materials.Body} />
        <mesh geometry={nodes.Object_14.geometry} material={materials.Carbon} />
        <mesh
          geometry={nodes.Object_15.geometry}
          material={materials.Aluminum}
        />
      </group>
      <group position={[0, 1.098, -0.616]} scale={0.001}>
        <mesh geometry={nodes.Object_17.geometry} material={materials.Carbon} />
        <mesh
          geometry={nodes.Object_18.geometry}
          material={materials.Dark_Metal}
        />
        <mesh
          geometry={nodes.Object_19.geometry}
          material={materials.Undercarriage}
        />
      </group>
      <group scale={0.001}>
        <mesh geometry={nodes.Object_35.geometry} material={materials.Body} />
        <mesh geometry={nodes.Object_36.geometry} material={materials.Carbon} />
        <mesh geometry={nodes.Object_37.geometry} material={materials.Carbon} />
        <mesh
          geometry={nodes.Object_38.geometry}
          material={materials.Dark_Metal}
        />
        <mesh geometry={nodes.Object_39.geometry} material={materials.Chrome} />
        <mesh
          geometry={nodes.Object_40.geometry}
          material={materials.Window_Glass}
        />
        <mesh
          geometry={nodes.Object_41.geometry}
          material={materials.Glass_Lights}
        />
        <mesh
          geometry={nodes.Object_42.geometry}
          material={materials.Undercarriage}
        />
        <mesh
          geometry={nodes.Object_43.geometry}
          material={materials.Aluminum}
        />
      </group>
      <group position={[0, 0.103, -0.006]} scale={0.001}>
        <mesh geometry={nodes.Object_49.geometry} material={materials.Carbon} />
        <mesh geometry={nodes.Object_50.geometry} material={materials.Chrome} />
        <mesh
          geometry={nodes.Object_51.geometry}
          material={materials.Front_Light_Lens}
        />
        <mesh
          geometry={nodes.Object_52.geometry}
          material={materials.Glass_Lights}
        />
        <mesh
          geometry={nodes.Object_53.geometry}
          material={materials.Front_Light}
        />
      </group>
      <group position={[0, -0.043, 0]} scale={1.494}>
        <mesh geometry={nodes.Object_59.geometry} material={materials.Carbon} />
        <mesh geometry={nodes.Object_60.geometry} material={materials.Hubcap} />
        <mesh
          geometry={nodes.Object_61.geometry}
          material={materials.Wheel_Screw}
        />
        <mesh
          geometry={nodes.Object_62.geometry}
          material={materials.Wheel_Screw}
        />
      </group>
      <group position={[0, -0.043, 0]} scale={1.494}>
        <mesh geometry={nodes.Object_64.geometry} material={materials.Tires} />
        <mesh geometry={nodes.Object_65.geometry} material={materials.Tires} />
        <mesh geometry={nodes.Object_66.geometry} material={materials.Tires} />
        <mesh geometry={nodes.Object_67.geometry} material={materials.Tires} />
        <mesh
          geometry={nodes.Object_68.geometry}
          material={materials.Tires_2}
        />
      </group>
      <group position={[0, -0.043, 0]} scale={1.494}>
        <mesh geometry={nodes.Object_70.geometry} material={materials.Carbon} />
        <mesh
          geometry={nodes.Object_71.geometry}
          material={materials.Brake_2}
        />
        <mesh
          geometry={nodes.Object_72.geometry}
          material={materials.Brake_wire}
        />
        <mesh geometry={nodes.Object_73.geometry} material={materials.Body} />
      </group>
      <mesh
        geometry={nodes.Object_11.geometry}
        material={materials.Glass_Lights}
        position={[0.002, 0.098, -0.012]}
        scale={0.001}
      />
      <mesh
        geometry={nodes.Object_21.geometry}
        material={materials.Carbon}
        position={[0, 0.755, 1.324]}
        scale={0.001}
      />
      <mesh
        geometry={nodes.Object_23.geometry}
        material={materials.Undercarriage}
        position={[0, 0.103, -0.007]}
        scale={0.001}
      />
      <mesh
        geometry={nodes.Object_25.geometry}
        material={materials.Dark_Metal}
        rotation={[Math.PI / 2, 0, Math.PI]}
      />
      <mesh
        geometry={nodes.Object_27.geometry}
        material={materials.Carbon}
        rotation={[Math.PI / 2, 0, Math.PI]}
      />
      <mesh
        geometry={nodes.Object_29.geometry}
        material={materials.Exhaust}
        position={[0, 0.914, 0]}
      />
      <mesh
        geometry={nodes.Object_31.geometry}
        material={materials.Carbon}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.Object_33.geometry}
        material={materials.Gold}
        scale={0.001}
      />
      <mesh
        geometry={nodes.Object_45.geometry}
        material={materials.Emblem}
        position={[0, -0.003, 0]}
        scale={0.001}
      />
      <mesh
        geometry={nodes.Object_47.geometry}
        material={materials.Mirror}
        scale={0.001}
      />
      <mesh
        geometry={nodes.Object_55.geometry}
        material={materials.Glass_Lights}
        position={[0, 0.103, -0.006]}
        scale={0.001}
      />
      <mesh
        geometry={nodes.Object_57.geometry}
        material={materials.Carbon}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.Object_75.geometry}
        material={materials.Brake_disk}
        position={[0, -0.043, 0]}
        scale={0.164}
      />
      <mesh
        geometry={nodes.Object_77.geometry}
        material={materials.Window_Glass}
        scale={0.001}
      />
      <mesh
        geometry={nodes.Object_79.geometry}
        material={materials.Window_Glass}
        scale={0.001}
      />
      <mesh
        geometry={nodes.Object_81.geometry}
        material={materials.Window_Glass}
        scale={0.001}
      />
      <mesh
        geometry={nodes.Object_83.geometry}
        material={materials.Window_Glass}
        position={[0, 1.098, -0.616]}
        scale={0.001}
      />
    </group>
  );
}

export default function Lamborghini(props) {
  const containerRef = useRef();
  const [scrollProgress, setScrollProgress] = useState(0);

  useEffect(() => {
    const handleScroll = () => {
      const scrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;
      const fullHeight = document.documentElement.scrollHeight;
      const progress = scrollPosition / (fullHeight - windowHeight);
      setScrollProgress(progress);
      
      console.log('Scroll Position:', scrollPosition);
      console.log('Window Height:', windowHeight);
      console.log('Full Height:', fullHeight);
      console.log('Scroll Progress:', progress);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  console.log('Rendering Lamborghini component');

  return (
    <>
      <Model {...props} />
      <Html fullscreen>
        <div ref={containerRef} className="absolute top-0 left-0 w-full h-[300vh] overflow-y-auto">
          {/* Debugging element */}
          <div className="fixed top-0 left-0 bg-black text-white p-2 z-50">
            Scroll Progress: {scrollProgress.toFixed(2)}
          </div>

          <section className="h-screen w-full flex flex-col justify-center items-start px-10 md:px-20 bg-black bg-opacity-50 sticky top-0">
            {console.log('Rendering Section 1')}
            <h1 className="text-6xl md:text-8xl font-bold text-white mb-4">
              Welcome to <span className="text-red-600 font-extrabold">Car</span><span className="text-blue-500 font-extrabold">Flex</span>
            </h1>
            <p className="text-2xl md:text-3xl text-gray-300 max-w-2xl">
              Experience the future of automotive customization
            </p>
            <button className="mt-8 px-6 py-3 bg-red-600 text-white rounded-full text-xl hover:bg-red-700 transition-colors duration-300">
              Get Started
            </button>
          </section>

          <section className="h-screen w-full flex flex-col justify-center items-end px-10 md:px-20 text-right bg-black bg-opacity-50 sticky top-0">
            {console.log('Rendering Section 2')}
            <h1 className="text-6xl md:text-8xl font-bold text-white mb-4">
              Customize Your <span className="text-blue-500 font-extrabold">Ride</span>
            </h1>
            <p className="text-2xl md:text-3xl text-gray-300 max-w-2xl">
              Unleash your creativity with our advanced 3D configurator
            </p>
            <div className="mt-8 flex space-x-4">
              <div className="w-16 h-16 rounded-full bg-red-600"></div>
              <div className="w-16 h-16 rounded-full bg-blue-500"></div>
              <div className="w-16 h-16 rounded-full bg-yellow-400"></div>
            </div>
          </section>

          <section className="h-screen w-full flex flex-col justify-center items-start px-10 md:px-20 bg-black bg-opacity-50 sticky top-0">
            {console.log('Rendering Section 3')}
            <h1 className="text-6xl md:text-8xl font-bold text-white mb-4">
              Experience the <span className="text-red-600 font-extrabold">Power</span>
            </h1>
            <p className="text-2xl md:text-3xl text-gray-300 max-w-2xl">
              Feel the thrill of your personalized supercar
            </p>
            <div className="mt-8 flex items-center space-x-4">
              <div className="text-4xl font-bold text-red-600">0-60 mph</div>
              <div className="text-5xl font-extrabold text-white">2.9s</div>
            </div>
          </section>
        </div>
      </Html>
    </>
  );
}

useGLTF.preload("/assets/models/scene.gltf");